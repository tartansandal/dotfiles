"" Personal VIM set up
" vim: foldmethod=marker foldlevel=999

" > Encoding --------------------------------------------------------------------{{{1

set encoding=utf-8
scriptencoding utf-8

" > Plugins ---------------------------------------------------------------------{{{1

" Load our plugin bundles
call plug#begin('~/.vim/bundles')

" File/buffer navigation plugins
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" Tim is the God of Vim
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-markdown'

Plug 'jacquesbh/vim-showmarks'
Plug 'Glench/Vim-Jinja2-Syntax'
" Plug 'ntpeters/vim-better-whitespace'
Plug 'adelarsq/vim-matchit'

" Javascript
Plug 'Quramy/tsuquyomi'
Plug 'leafgarland/typescript-vim'
Plug 'pangloss/vim-javascript'

" Asyncronous (on-the-fly) linting
Plug 'dense-analysis/ale'

" Code formating
Plug 'Chiel92/vim-autoformat'

" Do you like COC? Not really.
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Asyncronous completion
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py' }

" Snippets for faster editing
"" Note: YCM helps with snippet discovery
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Editable quickfix list
Plug 'Olical/vim-enmasse'

" Zeal for online help
Plug 'KabbAmine/zeavim.vim'

" Web lookup for online help
" Plug 'keith/investigate.vim'

" A better status line
Plug 'itchyny/lightline.vim'
Plug 'niklaas/lightline-gitdiff'
Plug 'niklaas/lightline-gitdiff'
" Running tests from current buffer
Plug 'janko-m/vim-test'

" Indentation highlighting
Plug 'Yggdroot/indentLine'

" Undo history visualization
Plug 'mbbill/undotree'

" This could be good for tables in Markdown
" Plug 'junegunn/vim-easy-align'

" Simple checkbox support
Plug 'jkramer/vim-checkbox'

" Fuzzy Finding
Plug 'junegunn/fzf.vim'

" Ranger only works in terminal
" Plug 'francoiscabrol/ranger.vim'
" let g:ranger_map_keys = 0

call plug#end()

" > General Settings -----------------------------------------------------------{{{1

" S: this indicates a setting covered by 'sensible'

"------------------------------------------
" Formating and Motion:
"------------------------------------------

"
" Limit line length to 80-88 chars. 
" Black has some rationale for extending beyound 80
"
set textwidth=80                 "Wrap at this column
set colorcolumn=+1               "Columns to highlight after textwidth

"
" Indent 4 spaces - a consistent and common convention 
" 
set tabstop=4                    "Indentation levels every four columns
set shiftwidth=4                 "Indent/outdent by four columns
set expandtab                    "Convert all tabs typed to spaces
set smartindent                  "Smart autoindenting when starting a new line
set shiftround                   "Indent/outdent to nearest tabstop
" S: set autoindent                   "Preserve current indent on new lines
" S: set backspace=indent,eol,start   "Make backspaces delete sensibly
" S: set smarttab

"
" Relative line numbers to encourage me to use line oriented motions more.
"
set relativenumber               " Display relative line numbers

"
" Automatice formating. The default is tcq. See 'help fo-table'
"
set formatoptions+=t    " Auto-wrap text using textwidth
set formatoptions+=c    " Auto-wrap comment text using comment leader
set formatoptions+=q    " Allow formatting of comments with "gq"
set formatoptions+=o    " Insert the current comment leader after hitting 'o'
" set formatoptions+=a    " Autoformat while editing
set formatoptions+=n    " Recognize numbered lists
set formatoptions+=l	" Long lines are not broken in insert mode
set formatoptions+=1    " Don't break a line after a one-letter word.
set formatoptions+=j    " Remove stray comment leaders when reformating
set formatoptions+=p    " Don't break lines at single spaces that follow periods.
set joinspaces          " Insert 2 spaces after '.' with the join command
set cpoptions+=J        " Two spaces after a '.' defines a sentence

" Use both system clipboard (+) and selection (*) for yank and put
set clipboard^=unnamed,unnamedplus

" Do not recognize octal numbers for Ctrl-A and Ctrl-X
set nrformats-=octal

" Allow virtual editing in visual block mode so we can form rectangles
set virtualedit=block

set whichwrap+=<>[]   " left arrow traverses the begining of the line
set matchpairs+=<:>   " Allow % to bounce between angles too

" May need this for paste in a terminal
" NB dont set paste in vimrc since that will override you expandtab setting
set pastetoggle=<F2>

set spelllang=en_au
set printoptions=paper:A4,formfeed:y
" S: set ttimeout           " time out for key codes
" S: set ttimeoutlen=100    " wait up to 100ms after Esc for special key


"------------------------------------------
" Completion:
"------------------------------------------

" S: set complete -=i " dont search included files

" S: set wildmenu
" set omnifunc=syntaxcomplete#Complete

" list all matches and complete till longest common strings
" This conflicts with statusline display
" set wildmode=list:longest

" ignore files we will never want to edit
set wildignore+=*.o,*.exe,*~,CVS,.svn,*.gz,*.zip,*.bz2,*.tgz
set wildignore+=*.dsc,*.rpm,*.deb,*.xpm,*.png

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

"------------------------------------------
"" Display:
"------------------------------------------

"" Superseded by lightline
"
"> Set the status line to display:
"- aligned left
"-  dir/file    : path to the file in the buffer, relative to current directory
"-  [help]      : help buffer flag
"-  [+/-]       : modified flag
"-  [RO]        : readonly flag
"-  [Preview]   : preview window flag
"-  [Quickfix/LocationList]
"-  [filetype]
"-  [git branch]
"- aligned right
"-  L,C-V       : line, column, and virtual column numbers
"-  "spell"
"-  P%      : % through the file of displayed window
" set statusline=[%n]\ %<%f\ %h%m%r%w%y%=%-10.(%l,%c%V%)\ %{(&spell?'spell':'')}\ %P

" set statusline=%<%f\ %m%r%w%y%q\ %{fugitive#statusline()}\ %=%-10.(%l,%c%V%)\ %{(&spell?'spell':'')}\ %P

" set noruler " not needed with custom statusline

" The following helps with spurious "Press Enter" requests
set cmdheight=2     " 2 lines for command buffer
set laststatus=2    " always display status bar
set showcmd         " display incomplete commands

" S: set scrolloff=5         " always show 5 lines of context when scrolling
" S: set sidescrolloff=5     " keep at least 5 columns of context to either side

" Use '" to go to last cursor postion
"
" augroup vimrcWindows
"     " remove all commands for the group current
"     autocmd!
"
"     " When editing a file, always jump to the last known cursor position.
"     " Don't do it when the position is invalid or when inside an event
"     " handler (happens when dropping a file on gvim).
"     autocmd BufReadPost *
"                 \ if line("'\"") > 0 && line("'\"") <= line("$") |
"                 \   exe "normal g`\"" |
"                 \ endif
" augroup END

set foldlevelstart=99
set incsearch

if has('mouse')
    set mousehide
    set mousemodel=popup_setpos
    set mouse=a
endif

" Only switch on syntax highlighting on, when the terminal has colors
" This must come before filetype detection for some reason
if &t_Co > 2 || has('gui_running')
    syntax on
    colorscheme dirtysea
    " colorscheme moonlight

    " hightlight strings in C comments
    let c_comment_strings=1

    let g:onedark_termcolors=16
    if (has('termguicolors'))
        set termguicolors
    endif
endif

" -----------------
" Files:
" -----------------

set path+=**            " search for files recursively
" S: set autoread       " re-read open files when changed outside Vim
set autowrite           " write file whenever buffer becomes hidden
set hidden              " hide buffers when they are abandoned
set browsedir=current   " which directory to use for the file browser
set fileformat=unix

" keep backups under ~/tmp
set backup          " keep a backup file
set backupcopy=yes  " copy the original even if a link
set backupdir=~/tmp/backup,~/,/tmp

set undodir=~/tmp/undo,~/,/tmp
set undofile          " keep a undo file
set undolevels=100    " maximum number of changes that can be undone
set undoreload=1000   " maximum number lines to save for undo on a buffer reload

set cryptmethod=blowfish  " use stronger encryption by default

set noswapfile  " swapfiles an annoyance since I save often

" write readonly file as root
" this is hanging, don't know why
" command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!

" use rg for gr[ep]
set grepprg=rg\ --vimgrep\ --max-columns\ 160\ --max-filesize\ 1M
set grepformat^=%f:%l:%c:%m

" Speed up diff by ignoring localisations
let g:diff_translations = 0

" Always use vertical diffs
set diffopt+=vertical

"------------------------------------------
" File Types:
"------------------------------------------

if has('autocmd')
    " Enable file type detection.
    " Also load indent files, to automatically do language-dependent indenting
    " All filetype detections commands go in .vim/ftdetect/
    " All filetype specific settings go in .vim/ftplugin/
    filetype plugin indent on
endif

let g:xml_use_xhtml=1
let g:xml_syntax_folding = 1

let g:markdown_folding = 1
let g:markdown_syntax_conceal = 0

" See ft_sql.vim
let g:sql_type_default = 'mysql'

" want this abbreviation, but just for python mode
" ab ip import ipdb; ipdb.set_trace()
" of perhaps just a <leader> keymap

function! InsertBreakPoint()
    if &filetype ==? 'python'
        normal! Oimport ipdb; ipdb.set_trace()  # noqa XXX
    endif
endfunction
noremap <silent> <leader>b :call InsertBreakPoint()<CR>

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(':DiffOrig')
    command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                \ | wincmd p | diffthis
endif

" > Plugin Settings -------------------------------------------------------------{{{1
" >> Misc -----------------------------------------------------------------------{{{2

" undotree
let g:undotree_ShortIndicators = 1

" vim-test
let test#strategy = 'make'

" lightline
set noshowmode
let g:lightline = {
    \   'colorscheme': 'Tomorrow_Night',
    \   'active': {
    \     'left': [
    \        [ 'mode', 'paste' ],
    \        [ 'gitbranch', 'readonly', 'filename', 'modified' ],
    \        [ 'gitdiff' ]
    \     ],
    \     'right': [
    \        [ 'lineinfo' ], [ 'percent' ],
    \        [ 'filetype' ]
    \     ]
    \   },
    \   'inactive': {
    \     'left': [
    \        [ 'filename', 'gitversion' ]
    \     ]
    \   },
    \   'component_function': {
    \     'gitbranch': 'fugitive#head',
    \   },
    \   'component_expand': {
    \     'gitdiff': 'lightline#gitdiff#get',
    \   },
    \   'component_type': {
    \     'gitdiff': 'middle',
    \   }, 
    \}

" UltiSnips triggering
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsListSnippets = '<C-tab>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
let g:UltiSnipsEditSplit='context'
let g:UltiSnipsEnableSnipMate = 0
let g:ultisnips_python_style = 'google'
let g:UltiSnipsSnippetDir = '~/.vim/MyUltiSnips'

let g:zv_zeal_executable = $HOME . '/bin/zeal'
let g:zv_docsets_dir = '~/.local/share/Zeal/Zeal/docsets/'

" Better Whitespace
" let g:better_whitespace_enabled = 1
" let g:strip_whitespace_on_save = 1
" let g:strip_whitespace_confirm = 0
" let g:strip_whitelines_at_eof = 1
" let g:strip_only_modified_lines = 0
" let g:better_whitespace_filetypes_blacklist = [
"             \ 'diff', 'gitcommit', 'unite', 'qf', 'help'
"             \ ]

" Fugitive
augroup fugitive
    autocmd!
    autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

" >> FZF ------------------------------------------------------------------------{{{2

" let g:fzf_colors = {
"   \ 'fg':      ['fg', 'Normal'],
"   \ 'bg':      ['bg', 'Normal'],
"   \ 'hl':      ['fg', 'Label'],
"   \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
"   \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
"   \ 'hl+':     ['fg', 'Label'],
"   \ 'info':    ['fg', 'Comment'],
"   \ 'border':  ['fg', 'Ignore'],
"   \ 'prompt':  ['fg', 'Function'],
"   \ 'pointer': ['fg', 'Statement'],
"   \ 'marker':  ['fg', 'Conditional'],
"   \ 'spinner': ['fg', 'Label'],
"   \ 'header':  ['fg', 'Comment'] }

" >> YouCompleteMe --------------------------------------------------------------{{{2

let g:ycm_min_num_of_chars_for_completion = 2       " Default
let g:ycm_min_num_identifier_candidate_chars = 0    " Default
let g:ycm_max_num_candidates = 50                   " Default for semantic completion
let g:ycm_max_num_identifier_candidates = 10        " Default for identifier completion
let g:ycm_auto_trigger = 1                          " Default
let g:ycm_filetype_whitelist = {'*': 1}             " Default

" Defaults with "markdown" removed
let g:ycm_filetype_blacklist = {
            \ 'notes': 1,
            \ 'netrw': 1,
            \ 'unite': 1,
            \ 'text': 1,
            \ 'vimwiki': 1,
            \ 'pandoc': 1,
            \ 'infolog': 1,
            \ 'mail': 1
            \}

" Default
let g:ycm_filetype_specific_completion_to_disable = {
            \ 'gitcommit': 1
            \}

" Default
let g:ycm_filepath_blacklist = {
            \ 'html': 1,
            \ 'jsx': 1,
            \ 'xml': 1,
            \}

" Need this for jedi signature help
let g:ycm_show_diagnostics_ui = 1    " Default 1

let g:ycm_global_ycm_extra_conf = '~/.vim/global-ycm-extra-conf.py'
" let g:ycm_autoclose_preview_window_after_completion = 0
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1

" >> NERDTree -------------------------------------------------------------------{{{2

let NERDTreeCaseSensitiveSort=1

"let NERDTreeChDirMode=0 " cwd never changed by NERD
"let NERDTreeChDirMode=1 " cwd changed on NERD load
let NERDTreeChDirMode=2  " cwd follows root

let NERDTreeHijackNetrw=0
let NERDTreeShowBookmarks=0
let NERDTreeIgnore=['\~$', '\.\(desktop\|pyc\|pdf\|odt\|odg\|doc\|xls\|png\|ai\|jpg\)$', '__pycache__']
let NERDTreeQuitOnOpen=1
let NERDTreeAutoCenter=1
let NERDTreeWinSize = 31
let NERDTreeWinSizeMax = 93
" directories first unless the have a .t suffix
"let NERDTreeSortOrder = ['\(\.t\)\@<!\/$', '*', '\.swp$',  '\.bak$', '\~$']
" directories first
let NERDTreeSortOrder = ['\/$', '*', '\.swp$',  '\.bak$', '\~$']
" let NERDTreeSortOrder = ['*', '\.swp$',  '\.bak$', '\~$']
let NERDTreeWinPos = 'right'

function! MyNERDTreeToggle ()
    if bufname('%') ==# '__MRU_Files__' || bufname('%') ==? '[BufExplorer]'
        quit
    endif
    silent NERDTreeToggle
endfunction

" >> Ale ------------------------------------------------------------------------{{{2
"" These get merged with the global list
"" let g:ale_lint_on_text_changed=0
"" let g:ale_lint_on_insert_leave=1

let g:ale_maximum_file_size=50000

" A note on text linters: 
"
"   * languagetool is too slow and does not handle markdown well
"   * write-good gave too many false positives
"   * textlint rouseau gave too many false positives
"   * proselint seemed to be the best middle-ground

" > Linting
let g:ale_linters = {
            \ 'python': ['flake8'],
            \ 'markdown': ['proselint', 'mdl'],
            \ }
let g:ale_markdown_mdl_options = '--style ~/.mdl-style.rb'

" > Fixing
let g:ale_fixers = {
            \ 'python': ['remove_trailing_lines', 'trim_whitespace'],
            \ 'markdown': ['remove_trailing_lines', 'trim_whitespace']
            \ }
let g:ale_fix_on_save = 1

" > Display
let g:ale_sign_error = ' ✗'
let g:ale_sign_style_error = ' ✗'
let g:ale_sign_warning = ' ⚠'
let g:ale_sign_style_warning = ' ⚠'
let g:ale_sign_colum_always = 1
let g:ale_change_sign_column_color=1

" >> Netrw ----------------------------------------------------------------------{{{2

" XXX Seeing way to many bugs and errors with this. Dont think its maintained
" much anymore.

" tpope's suggestions
" nnoremap <leader>e :Explore<CR>
let g:netrw_banner = 0

let g:netrw_sizestyle='b' " human readable sizes

"" Default listing style
" let g:netrw_liststyle = 0     " thin
let g:netrw_liststyle = 1     " long
" let g:netrw_liststyle = 2     " wide
" let g:netrw_liststyle = 3       " tree

let g:netrw_browse_split = 0  " current window
" let g:netrw_browse_split = 1  " new horizontal split
" let g:netrw_browse_split = 2  " new vertical split
" let g:netrw_browse_split = 3  " new tab
" let g:netrw_browse_split = 4    " open previous window

" let g:netrw_preview=0         " preview in horizontal split window
" let g:netrw_preview=1         " preview in vertical split window

" let g:netrw_altv = 0            " default to left splitting
" let g:netrw_altv = 1          " default to right splitting
" let g:netrw_alto = 0            " default to splitting above
 let g:netrw_alto = 1          " default to splitting below
let g:netrw_winsize = 25        " % of window width/height to use
" let g:netrw_keepdir = 0         " current dir tracks browsing dir
let g:netrw_keepdir = 1         " current dir does not track browsing dir

"" Default hiding
" let g:netrw_hide = 0          " show all
let g:netrw_hide=1            " show not-hidden files
" let g:netrw_hide = 2          " show hidden files only
let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'

" Listing Speed
" let g:netrw_fastbrowse=0      " slow:  always obtains directory listings
let g:netrw_fastbrowse=1        " medium: re-use listings only when remote browsing
" let g:netrw_fastbrowse=2      " fast: only obtains new directory listings

" FIXME this does not work for me
let g:netrw_use_tab=1           " ctrl-tab to shrink/expand Lexplorer window

let g:netrw_special_syntax=1    " highlight special (binary) files

" set external tool for opening file (gx) to xdg-open
let g:netrw_browsex_viewer="xdg-open"
let g:netrw_suppress_gx_mesg=0

" > Key Mapping -----------------------------------------------------------------{{{1

" Windows
noremap <Tab> <c-w>w
noremap <Shift-Tab> <c-w>W

" Tabs
" Use control + arrow key to move between tabs
" (same as for gnome terminal tabs)
nmap <C-Right>       :tabnext<CR>
nmap <C-Left>        :tabprevious<CR>

" >> Leader Keys ----------------------------------------------------------------{{{2

noremap <silent> <leader><space> :nohlsearch<CR>
noremap <silent> <leader>o :only<CR>

" double up on the \b command since I am so used to this binding
noremap  <silent> <C-\>    :Buffers<CR>

" > File short cuts
noremap <silent> <leader>C :e ~/dotfiles/vim/cheetsheet.mkd<CR>
noremap <silent> <leader>N :e ~/notes<CR>

" > Browsers
noremap <silent> <leader>g :G<CR>
noremap <silent> <leader><leader>G :Gbrowse<CR>
noremap <silent> <leader>u :UndotreeToggle<CR>
noremap <silent> <leader>n :call MyNERDTreeToggle()<CR>
noremap <silent> <leader>a :Autoformat<CR>

" > FZF
nmap <Leader>b :Buffers<CR>

nmap <Leader>f :GFiles<CR>
nmap <Leader>F :Files<CR>

" probably use this the most
nmap <Leader>h :History<CR>
nmap <Leader>: :History:<CR>
nmap <Leader>/ :History/<CR>

nmap <Leader>t :BTags<CR>
nmap <Leader>T :Tags<CR>

nmap <Leader>l :BLines<CR>
nmap <Leader>L :Lines<CR>

" nmap <Leader>m :Methods<CR>
nmap <Leader>h :History<CR>
nmap <Leader>H :Helptags!<CR>
nmap <Leader>M :Maps<CR>
nmap <Leader>C :Commands<CR>
nmap <Leader>' :Marks<CR>
nmap <Leader>s :Filetypes<CR>
nmap <Leader>S :Snippets<CR>

" grep bindings worl better
" nmap <Leader>/ :Rg<Space>

" > Grep (same bindings as easygrep)
noremap <silent> <leader>vv :grep! -w <cword><CR>
noremap <silent> <leader>vV :grep! -w <cWORD><CR>
noremap <silent> <leader>vf :grep! <cfile><CR>


" > YouCompleteMe
noremap <silent> <leader>jd :YcmCompleter GoTo<CR>
noremap <silent> <leader>jr :YcmCompleter GoToReferences<CR>
noremap <silent> <leader>jk :YcmCompleter GetDoc<CR>


" >> Fixes ----------------------------------------------------------------------{{{2

" Tweaks to fix problematic mappings 

" Don't use Ex mode, use Q for formatting.
map Q gq

" The perl-support plugin uses mapleaders a lot and the default leader (\)
" conflicts with inputing references, so we make these explicit to terminate the
" lookup as soon as they are entered
inoremap <silent> <leader>$ \$
inoremap <silent> <leader>@ \@
inoremap <silent> <leader>% \%
inoremap <silent> <leader>& \&

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
" Revert with ":iunmap <C-U>".
inoremap <C-U> <C-G>u<C-U>

" Break undo sequence on specific characters
inoremap , ,<C-g>u
inoremap . .<C-g>u
inoremap ! !<C-g>u
inoremap ? ?<C-g>u

" Keep visual selection when indenting
xnoremap > >gv
xnoremap < <gv

" FIXME do I need this anymore?
if &term =~? 'xterm.*'"
    " remap these from the terminal codes
    map <Esc>O1;2A <S-Up>
    map <Esc>O1;2B <S-Down>
    map <Esc>O1;2C <S-Right>
    map <Esc>O1;2D <S-Left>
    map <Esc>O1;3A <A-Up>
    map <Esc>O1;3B <A-Down>
    map <Esc>O1;3C <A-Right>
    map <Esc>O1;3D <A-Left>
    map <Esc>O1;5A <C-Up>
    map <Esc>O1;5B <C-Down>
    map <Esc>O1;5C <C-Right>
    map <Esc>O1;5D <C-Left>

    imap <Esc>O1;2A <S-Up>
    imap <Esc>O1;2B <S-Down>
    imap <Esc>O1;2C <S-Right>
    imap <Esc>O1;2D <S-Left>
    imap <Esc>O1;3A <A-Up>
    imap <Esc>O1;3B <A-Down>
    imap <Esc>O1;3C <A-Right>
    imap <Esc>O1;3D <A-Left>
    imap <Esc>O1;5A <C-Up>
    imap <Esc>O1;5B <C-Down>
    imap <Esc>O1;3C <A-Right>
    imap <Esc>O1;3D <A-Left>
    imap <Esc>O1;5A <C-Up>
    imap <Esc>O1;5B <C-Down>
    imap <Esc>O1;5C <C-Right>
    imap <Esc>O1;5D <C-Left>
endif

" > Old Plugins -----------------------------------------------------------------{{{1

" >> TagBar ---------------------------------------------------------------------{{{2
" hi TagbarFoldIcon guifg=fg
" let g:tagbar_width     = 31
" let g:tagbar_left      = 0
" let g:tagbar_autoclose = 1
" let g:tagbar_autofocus = 1
" let g:tagbar_compact   = 1
" let g:tagbar_autoshowtag = 0

" let g:tagbar_type_sql = {
"             \    'replace' : 1,
"             \    'ctagstype' : 'sql',
"             \    'kinds' : [
"             \        'P:packages:1',
"             \        'd:prototypes',
"             \        'c:cursors',
"             \        'f:functions',
"             \        'F:record fields:1:0',
"             \        'L:block label',
"             \        'p:procedures',
"             \        's:subtypes',
"             \        't:tables',
"             \        'T:triggers',
"             \        'v:variables',
"             \        'i:indexes',
"             \        'e:events',
"             \        'U:publications',
"             \        'R:services',
"             \        'D:domains',
"             \        'V:views',
"             \        'n:synonyms',
"             \        'x:MobiLink Table Scripts',
"             \        'y:MobiLink Conn Scripts',
"             \        'z:MobiLink Properties',
"             \    ],
"             \}

" let g:tagbar_type_perl = {
"             \    'replace' : 1,
"             \    'ctagstype' : 'perl',
"             \        'kinds' : [
"             \        'p:packages:1:0',
"             \        'c:constants:1:0',
"             \        's:subroutines',
"             \    ],
"             \}

" let g:tagbar_type_html = {
"             \    'kinds' : [
"             \        'f:JavaScript funtions',
"             \        'a:named anchors',
"             \    ],
"             \}

" let g:tagbar_type_tt2html = {
"             \    'ctagstype' : 'tt2html',
"             \        'kinds' : [
"             \        'i:ids',
"             \        'f:functions',
"             \        'm:macros',
"             \    ],
"             \}

" let g:tagbar_type_markdown = {
"             \    'ctagstype' : 'markdown',
"             \    'kinds' : [
"             \        'h:Heading_L1',
"             \        'i:Heading_L2',
"             \        'k:Heading_L3'
"             \    ]
"             \}

" let g:_type_asciidoc = {
"             \    'ctagstype' : 'asciidoc',
"             \    'kinds' : [
"             \        'a:anchors:1',
"             \        't:titles:1',
"             \        'n:includes:1',
"             \        'i:images:1',
"             \        'I:inline images:1'
"             \    ],
"             \    'sort' : 0
"             \}

" function! MyTagbarToggle ()
"     if bufname('%') ==# '__MRU_Files__' || bufname('%') ==# '[BufExplorer]'
"         quit
"     endif
"     silent! NERDTreeClose
"     silent TagbarToggle
" endfunction
"
" >> Perl Support ---------------------------------------------------------------{{{2

" let g:Perl_GlobalTemplateFile      =  $HOME.'/.vim/perl-support/templates/Templates'
" let g:Perl_LocalTemplateFile       =  $HOME.'/.vim/perl-support/templates/Templates'
" let g:Perl_TemplateOverwrittenMsg  = 'yes'
" let g:Perl_Ctrl_j                  = 'on'

" let g:Perl_CodeSnippets            = $HOME.'/.vim/perl-support/codesnippets/'
" let g:Perl_LoadMenus               = 'yes'
" let g:Perl_Dictionary_File         = ''
" let g:Perl_Root                    = '&Perl.'
" let g:Perl_MenuHeader              = 'yes'
" let g:Perl_GuiSnippetBrowser       = 'commandline' " commandline|explorer|gui
" let g:Perl_GuiTemplateBrowser      = 'commandline'

" let g:Perl_PerlModuleList          = $HOME.'/.vim/perl-support/modules/perl-modules.list'
" let g:Perl_PerlModuleListGenerator = $HOME.'/.vim/perl-support/scripts/pmdesc3.pl'
" let g:Perl_OutputGvim              = 'vim'
" let g:Perl_XtermDefaults           = '-fa courier -fs 12 -geometry 80x24'
" let g:Perl_Debugger                = 'perl'
" let g:Perl_TimestampFormat         = '%Y%m%d %H%M%S'
" let g:Perl_FormatDate              = '%F'
" let g:Perl_FormatTime              = '%H:%M'
" let g:Perl_FormatYear              = 'year %Y'

" let g:Perl_LineEndCommColDefault   = 49
" let g:Perl_PodcheckerWarnings      = 'yes'
" let g:Perl_Printheader             = "%<%f%h%m%<  %=%{strftime('%x %X')}     Page %N"
" let g:Perl_PerlcriticSeverity      = 5
" let g:Perl_PerlcriticVerbosity     = 5
" let g:Perl_PerlcriticOptions       = ''
" let g:Perl_PerlRegexSubstitution   = '$+'
" let g:Perl_NYTProf_html            = 'no'
" let g:Perl_NYTProf_browser         = 'firefox'

" >> Syntastic ------------------------------------------------------------------{{{2

" " Only used in directories where we have created a script to invoke the
" " interpreter
" let g:syntastic_enable_perl_checker = 0
" let g:syntastic_error_symbol='✗'
" let g:syntastic_warning_symbol='⚠'
" let g:syntastic_auto_jump=1

" " set statusline+=%#warningmsg#
" " set statusline+=%{SyntasticStatuslineFlag()}
" " set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 0
" let g:syntastic_check_on_wq = 0

" let g:tsuquyomi_disable_quickfix = 1
" let g:syntastic_javascript_checkers = ['eslint']

" " use python-mode checkers and integration instead
" " let g:syntastic_mode_map = { 'passive_filetypes': ['python'] }

" let g:syntastic_python_python_exec='/usr/bin/python3'
" let g:syntastic_python_checkers = ['flake8', 'python']

" >> RPM-SPEC -------------------------------------------------------------------{{{2
" augroup specfile
"     autocmd!
"     autocmd FileType spec map <buffer> <LocalLeader>c <Plug>SpecChangelog
" augroup END
" let spec_chglog_format = '%a %b %d %Y Kahlil (Kal) Hodgson <kahlil.hodgson999@gmail.com>'
" let spec_chglog_prepend = 1
" let spec_chglog_release_info = 0
" let spec_chglog_never_increase_release = 0
" let g:changelog_date_end_entry_search = '^\s*$'

" >> BufExplorer ------------------------------------------------------------------{{{2

" let g:bufExplorerDefaultHelp=0       " Show default help.
" let g:bufExplorerDetailedHelp=0      " Do not show detailed help.
" let g:bufExplorerFindActive=1        " Go to active window.
" let g:bufExplorerReverseSort=0       " Do not sort in reverse order.
" let g:bufExplorerShowDirectories=0   " Don't show directories.
" let g:bufExplorerShowRelativePath=1  " Show relative paths.
" let g:bufExplorerShowUnlisted=0      " Do not show unlisted buffers.
" let g:bufExplorerSortBy='mru'        " Sort by most recently used.
" let g:bufExplorerSplitBelow=1        " Split new window below current.
" let g:bufExplorerSplitOutPathName=0  " Split the path and file name.
" let g:bufExplorerSplitRight=1        " Split right.

" let g:bufExplorerResize=1
" let g:bufExplorerMaxHeight=25 " Handles dynamic resizing of the window.
" let g:bufExplorerDisableDefaultKeyMapping=1    " Disable mapping.

" function! MyCycleNextLine()
"     if getline('.') == getline('$')
"         :1
"     else
"         :+
"     endif
" endfunction

" function! MyBufExplorer()
"     silent! NERDTreeClose
"     " silent! TagbarClose

"     if bufname('') ==? ''
"         :call MyMRU()
"     else
"         if len(getbufinfo({'buflisted':1})) > 1
"             :BufExplorerHorizontalSplit
"             :call BufExplorer_ReSize()
"             :+
"             nmap <buffer> <Tab>   :call MyCycleNextLine()<CR>
"             nmap <buffer> <C-Tab> :call MyCycleNextLine()<CR>
"             nmap <buffer> <\>     :call MyCycleNextLine()<CR>
"             nmap <buffer> <C-\>   :call MyCycleNextLine()<CR>
"         endif
"     endif
" endfunction

" >> MRU ------------------------------------------------------------------------{{{2

" let MRU_File = $HOME . '/.vim_mru_files'
" let MRU_Exclude_Files = 'COMMIT_EDITMSG'
" let MRU_Max_Entries = 20
" let MRU_Auto_Close = 1
" let MRU_Add_Menu = 0

" function! MyMRU ()
"     if bufname('%') ==# '__MRU_Files__'
"         " This causes the MRU list to toggle
"         quit
"     else
"         " skip to prev window if current buffer has a type
"         if &buftype !=? ''
"             wincmd p
"         endif
"         MRU
"         setlocal cursorline
"         nmap <buffer> <Tab>   :call MyCycleNextLine()<CR>
"         nmap <buffer> <C-Tab> :call MyCycleNextLine()<CR>
"         nmap <buffer> <\>     :call MyCycleNextLine()<CR>
"         nmap <buffer> <C-\>   :call MyCycleNextLine()<CR>
"     endif
" endfunction

