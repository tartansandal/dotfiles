"" Personal VIM set up
" vim: foldmethod=marker foldlevel=999

" > Encoding ----------------------------------------------------------------{{{1

set encoding=utf-8
scriptencoding utf-8

" > Plugins -----------------------------------------------------------------{{{1

" Load our plugin bundles
call plug#begin('~/.vim/bundles')

" File/buffer navigation plugins
Plug 'scrooloose/nerdtree', { 'on': ['NERDTree', 'NERDTreeFind'] }

" Tim is the God of Vim
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-rhubarb'

Plug 'jacquesbh/vim-showmarks'
Plug 'Glench/Vim-Jinja2-Syntax'
" Plug 'ntpeters/vim-better-whitespace'
Plug 'adelarsq/vim-matchit'

" Do you like Coc? Hell Yeah!
Plug 'neoclide/coc.nvim', {'branch': 'release'}

"" Used buy FZF and Coc
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Asyncronous (on-the-fly) linting
Plug 'dense-analysis/ale'

" Code formating
" This may be superseded by Coc
Plug 'Chiel92/vim-autoformat'

" Editable quickfix list
Plug 'Olical/vim-enmasse'

" Zeal for online help
Plug 'KabbAmine/zeavim.vim'

" Web lookup for online help
" Plug 'keith/investigate.vim'

" A better status line
Plug 'itchyny/lightline.vim'
Plug 'niklaas/lightline-gitdiff'

" Running tests from current buffer
Plug 'janko-m/vim-test'

" Indentation highlighting
Plug 'Yggdroot/indentLine'

" Undo history visualization
Plug 'mbbill/undotree'

" This could be good for tables in Markdown
Plug 'junegunn/vim-easy-align'

" Simple checkbox support
Plug 'jkramer/vim-checkbox', { 'for': 'markdown' }

" Fuzzy Finding
Plug 'junegunn/fzf.vim'

" Ranger only works in terminal
" Plug 'francoiscabrol/ranger.vim'
" let g:ranger_map_keys=0

" Git signs in the gutter
Plug 'airblade/vim-gitgutter'

" temp for debugging netrw
" Plug 'vim-scripts/Decho'

" Better colorscheme
Plug 'tartansandal/base16-vim'

call plug#end()

" > General Settings -------------------------------------------------------{{{1

"------------------------------------------
" Formating and Motion:
"------------------------------------------

"
" Limit line length to 80-88 chars. 
" Black has some rationale for extending beyound 80
"
set textwidth=80                 "Wrap at this column
set colorcolumn=+1               "Columns to highlight after textwidth

"
" Indent 4 spaces - a consistent and common convention 
" 
set tabstop=4                    "Indentation levels every four columns
set shiftwidth=4                 "Indent/outdent by four columns
set expandtab                    "Convert all tabs typed to spaces
set smartindent                  "Smart autoindenting when starting a new line
set shiftround                   "Indent/outdent to nearest tabstop
set autoindent                   "Preserve current indent on new lines
set backspace=indent,eol,start   "Make backspaces delete sensibly
set smarttab

"
" Relative line numbers to encourage me to use line oriented motions more.
"
set relativenumber               " Display relative line numbers

"
" Automatice formating. The default is tcq. See 'help fo-table'
"
set formatoptions+=t    " Auto-wrap text using textwidth
set formatoptions+=c    " Auto-wrap comment text using comment leader
set formatoptions+=q    " Allow formatting of comments with "gq"
set formatoptions+=o    " Insert the current comment leader after hitting 'o'
" set formatoptions+=a    " Autoformat while editing
set formatoptions+=n    " Recognize numbered lists
set formatoptions+=l	" Long lines are not broken in insert mode
set formatoptions+=1    " Don't break a line after a one-letter word.
set formatoptions+=j    " Remove stray comment leaders when reformating
set formatoptions+=p    " Don't break lines at single spaces that follow periods.
set joinspaces          " Insert 2 spaces after '.' with the join command
set cpoptions+=J        " Two spaces after a '.' defines a sentence

" Use both system clipboard (+) and selection (*) for yank and put
set clipboard^=unnamed,unnamedplus

" Do not recognize octal numbers for Ctrl-A and Ctrl-X
set nrformats-=octal

" Allow virtual editing in visual block mode so we can form rectangles
set virtualedit=block

set whichwrap+=<>[]   " left arrow traverses the begining of the line
set matchpairs+=<:>   " Allow % to bounce between angles too

" May need this for paste in a terminal
" NB dont set paste in vimrc since that will override you expandtab setting
set pastetoggle=<F2>

set spelllang=en_au
set printoptions=paper:A4,formfeed:y
set ttimeout           " time out for key codes
set ttimeoutlen=100    " wait up to 100ms after Esc for special key


"------------------------------------------
" Completion:
"------------------------------------------

set complete -=i " dont search included files
set wildmenu

" set omnifunc=syntaxcomplete#Complete

" list all matches and complete till longest common strings
" This conflicts with statusline display
" set wildmode=list:longest

" ignore files we will never want to edit
set wildignore+=*.o,*.exe,*~,CVS,.svn,*.gz,*.zip,*.bz2,*.tgz
set wildignore+=*.dsc,*.rpm,*.deb,*.xpm,*.png

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

"------------------------------------------
"" Display:
"------------------------------------------

" The following helps with spurious "Press Enter" requests
set cmdheight=2     " 2 lines for command buffer
set laststatus=2    " always display status bar
set showcmd         " display incomplete commands

set scrolloff=5         " always show 5 lines of context when scrolling
set sidescrolloff=5     " keep at least 5 columns of context to either side

" Use '" to go to last cursor postion
"
" augroup vimrcWindows
"     " remove all commands for the group current
"     autocmd!
"
"     " When editing a file, always jump to the last known cursor position.
"     " Don't do it when the position is invalid or when inside an event
"     " handler (happens when dropping a file on gvim).
"     autocmd BufReadPost *
"                 \ if line("'\"") > 0 && line("'\"") <= line("$") |
"                 \   exe "normal g`\"" |
"                 \ endif
" augroup END

set foldlevelstart=99
set incsearch

if has('mouse')
    set mousehide
    set mousemodel=popup_setpos
    set mouse=a
endif

let g:base16_shell_path="~/.config/base16-shell/scripts"

" For some weird reason this does not load in terminal vim

" Load the current shell colorscheme
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" -----------------
" Files:
" -----------------

set path+=**            " search for files recursively
set autoread            " re-read open files when changed outside Vim
set autowrite           " write file whenever buffer becomes hidden
set hidden              " hide buffers when they are abandoned
set browsedir=current   " which directory to use for the file browser
set fileformat=unix

" keep backups under ~/tmp
" set backup          " keep a backup file
" set backupcopy=yes  " copy the original even if a link
" set backupdir=~/tmp/backup,~/,/tmp

set undodir=~/tmp/undo,~/,/tmp
set undofile          " keep a undo file
set undolevels=100    " maximum number of changes that can be undone
set undoreload=1000   " maximum number lines to save for undo on a buffer reload

set cryptmethod=blowfish  " use stronger encryption by default

set noswapfile  " swapfiles an annoyance since I save often

" write readonly file as root
" this is hanging, don't know why
" command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!

" use rg for gr[ep]
set grepprg=rg\ --vimgrep\ --max-columns\ 160\ --max-filesize\ 1M
set grepformat^=%f:%l:%c:%m

" Speed up diff by ignoring localisations
let g:diff_translations=0

" Always use vertical diffs
set diffopt+=vertical

"------------------------------------------
" File Types:
"------------------------------------------

if has('autocmd')
    " Enable file type detection.
    " Also load indent files, to automatically do language-dependent indenting
    " All filetype detections commands go in .vim/ftdetect/
    " All filetype specific settings go in .vim/ftplugin/
    filetype plugin indent on
endif

let g:xml_use_xhtml=1
let g:xml_syntax_folding=1

let g:markdown_folding=1
let g:markdown_syntax_conceal=0
let g:vim_markdown_folding_disabled = 1
let g:markdown_fenced_languages = ['css', 'js=javascript']

" See ft_sql.vim
let g:sql_type_default='mysql'

" want this abbreviation, but just for python mode
" ab ip import ipdb; ipdb.set_trace()
" of perhaps just a <leader> keymap

function! InsertBreakPoint()
    if &filetype ==? 'python'
        normal! Oimport ipdb; ipdb.set_trace()  # noqa XXX
    endif
endfunction
noremap <silent> <leader>b :call InsertBreakPoint()<CR>

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(':DiffOrig')
    command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                \ | wincmd p | diffthis
endif

" > Plugin Settings ---------------------------------------------------------{{{1
" >> Misc -------------------------------------------------------------------{{{2

" undotree
let g:undotree_ShortIndicators=1

" vim-test
let test#strategy='make'

" lightline
set noshowmode
let g:lightline={
    \   'colorscheme': 'Tomorrow_Night',
    \   'active': {
    \     'left': [
    \        [ 'mode', 'paste' ],
    \        [ 'gitbranch', 'cocstatus', 'readonly', 'filename', 'modified' ],
    \        [ 'gitdiff' ]
    \     ],
    \     'right': [
    \        [ 'lineinfo' ], [ 'percent' ],
    \        [ 'filetype' ]
    \     ]
    \   },
    \   'inactive': {
    \     'left': [
    \        [ 'filename', 'gitversion' ]
    \     ]
    \   },
    \   'component_function': {
	\     'cocstatus': 'coc#status',
    \     'gitbranch': 'fugitive#head',
    \   },
    \   'component_expand': {
    \     'gitdiff': 'lightline#gitdiff#get',
    \   },
    \   'component_type': {
    \     'gitdiff': 'middle',
    \   }, 
    \}

" use autocmd to update status
autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()

" UltiSnips triggering
let g:UltiSnipsExpandTrigger='<C-j>'
let g:UltiSnipsListSnippets='<C-tab>'
let g:UltiSnipsJumpForwardTrigger='<C-j>'
let g:UltiSnipsJumpBackwardTrigger='<C-k>'
let g:UltiSnipsEditSplit='context'
let g:UltiSnipsEnableSnipMate=0
let g:ultisnips_python_style='google'
let g:UltiSnipsSnippetDir=expand('~/.vim/MyUltiSnips')

let g:zv_zeal_executable=expand('~/bin/zeal')
let g:zv_docsets_dir=expand('~/.local/share/Zeal/Zeal/docsets/')

" Better Whitespace
" let g:better_whitespace_enabled=1
" let g:strip_whitespace_on_save=1
" let g:strip_whitespace_confirm=0
" let g:strip_whitelines_at_eof=1
" let g:strip_only_modified_lines=0
" let g:better_whitespace_filetypes_blacklist=[
"             \ 'diff', 'gitcommit', 'unite', 'qf', 'help'
"             \ ]

" Fugitive
augroup fugitive
    autocmd!
    autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END


" >> FZF --------------------------------------------------------------------{{{2

let g:fzf_colors = { 
  \ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Function'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Special'],
  \ 'border':  ['fg', 'Cursor'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'bg+':     ['bg', 'MatchParen'],
  \ 'header':  ['fg', 'Comment'],
  \ 'spinner': ['fg', 'Structure'],
\}
  
" These are deaply mysterious
  " \ 'hl+':     ['fg', 'Keyword'],
  " \ 'fg+':     ['fg', 'Cursor'],
  " \ 'bg+':     ['bg', 'Tabline', 'Normal', 'Normal'],
  "

let g:fzf_history_dir = '~/.local/share/fzf-history'

augroup fzf
  " Hide ruler when FZF window is active
  autocmd!
  autocmd FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
augroup end

" >> NERDTree ---------------------------------------------------------------{{{2

let NERDTreeCaseSensitiveSort=1

"let NERDTreeChDirMode=0 " cwd never changed by NERD
"let NERDTreeChDirMode=1 " cwd changed on NERD load
let NERDTreeChDirMode=2  " cwd follows root

let NERDTreeHijackNetrw=1
let NERDTreeShowBookmarks=0
let NERDTreeIgnore=[
    \   '\~$', 
    \   '\.\(desktop\|pyc\|pdf\|odt\|odg\|doc\|xls\|png\|ai\|jpg\)$',
    \   '__pycache__'
    \]
let NERDTreeQuitOnOpen=1
let NERDTreeAutoCenter=1
let NERDTreeWinSize=31
let NERDTreeWinSizeMax=93
" Sort directories first
let NERDTreeSortOrder=['\/$', '*', '\.swp$',  '\.bak$', '\~$']

" Putting this on the right means the content in source window (which is left
" aligned) move less when toggle the browser
let NERDTreeWinPos='right'
let NERDTreeHighlightCursorline=1
 
" >> Ale --------------------------------------------------------------------{{{2

"" These get merged with the global list
"" let g:ale_lint_on_text_changed=0
"" let g:ale_lint_on_insert_leave=1

let g:ale_maximum_file_size=50000

" A note on text linters: 
"
"   * languagetool is too slow and does not handle markdown well
"   * write-good gave too many false positives
"   * textlint rouseau gave too many false positives
"   * proselint seemed to be the best middle-ground

" > Linting
let g:ale_linters={
            \ 'python': ['flake8'],
            \ 'markdown': ['proselint', 'mdl'],
            \ }
let g:ale_markdown_mdl_options='--style ~/.mdl-style.rb'

" > Fixing
let g:ale_fixers={
            \ 'python': ['remove_trailing_lines', 'trim_whitespace'],
            \ 'markdown': ['remove_trailing_lines', 'trim_whitespace']
            \ }
let g:ale_fix_on_save=1

" > Display
let g:ale_sign_error='✗'
let g:ale_sign_style_error='✗'
let g:ale_sign_warning='⚠'
let g:ale_sign_style_warning='⚠'

" >> Netrw ------------------------------------------------------------------{{{2

" XXX Seeing way to many bugs and errors with this. Dont think its maintained
" much anymore.

" tpope's suggestions
" nnoremap <leader>e :Explore<CR>
let g:netrw_banner=0

let g:netrw_sizestyle='b' " human readable sizes

"" Default listing style
" let g:netrw_liststyle=0     " thin
let g:netrw_liststyle=1     " long
" let g:netrw_liststyle=2     " wide
" let g:netrw_liststyle=3       " tree

let g:netrw_browse_split=0  " current window
" let g:netrw_browse_split=1  " new horizontal split
" let g:netrw_browse_split=2  " new vertical split
" let g:netrw_browse_split=3  " new tab
" let g:netrw_browse_split=4    " open previous window

" let g:netrw_preview=0         " preview in horizontal split window
" let g:netrw_preview=1         " preview in vertical split window

" let g:netrw_altv=0            " default to left splitting
" let g:netrw_altv=1          " default to right splitting
" let g:netrw_alto=0            " default to splitting above
 let g:netrw_alto=1          " default to splitting below
let g:netrw_winsize=25        " % of window width/height to use
" let g:netrw_keepdir=0         " current dir tracks browsing dir
let g:netrw_keepdir=1         " current dir does not track browsing dir

"" Default hiding
" let g:netrw_hide=0          " show all
let g:netrw_hide=1            " show not-hidden files
" let g:netrw_hide=2          " show hidden files only
let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'

" Listing Speed
" let g:netrw_fastbrowse=0      " slow:  always obtains directory listings
let g:netrw_fastbrowse=1        " medium: re-use listings only when remote browsing
" let g:netrw_fastbrowse=2      " fast: only obtains new directory listings

" FIXME this does not work for me
let g:netrw_use_tab=1           " ctrl-tab to shrink/expand Lexplorer window

let g:netrw_special_syntax=1    " highlight special (binary) files

" " XXX Dont set this! xdg-open needs to be run in the background. Had to patch
" that separately
" let g:netrw_browsex_viewer="xdg-open"
" let g:netrw_suppress_gx_mesg=1

" >> COC -------------------------------------------------------------------{{{2

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
" XXX Does not seem to work for me
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>rf  <Plug>(coc-format-selected)
nmap <leader>rf  <Plug>(coc-format-selected)

augroup coc
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

hi CocErrorSign   ctermfg=Red     guifg=#840000  " base0E  
hi CocWarningSign ctermfg=Brown   guifg=#755B00  " base0C
hi CocInfoSign    ctermfg=Yellow  guifg=#730073  " base0B
hi CocHintSign    ctermfg=Blue    guifg=#000090  " base08
hi CocCodeLens    ctermfg=Gray    guifg=#006565  " base09

" > Key Mapping ------------------------------------------------------------{{{1

" Windows
" noremap <Tab> <c-w>w
" noremap <Shift-Tab> <c-w>W

nnoremap <S-Up>    <c-w>k
nnoremap <S-Down>  <c-w>j
nnoremap <S-Left>  <c-w>h
nnoremap <S-Right> <c-w>l

" Tabs
" Use control + arrow key to move between tabs
" (same as for gnome terminal tabs)
noremap <C-Right>       :tabnext<CR>
noremap <C-Left>        :tabprevious<CR>

function! MyCycleNextLine()
    if getline('.') == getline('$')
        :1
    else
        :+
    endif
endfunction

function! Switcher()
    silent! NERDTreeClose

    if len(getbufinfo({'buflisted':1})) > 1
        " If more than 1 active buffer
        :Buffers
    else
        " Otherwise lookup history
        :History
    endif

endfunction

command! -nargs=0 Switcher :call Switcher()

" >> Leader Keys -----------------------------------------------------------{{{2

noremap <silent><leader><space> :nohlsearch<CR>
noremap <silent><leader>o :only<CR>

" double up on the \b command since I am so used to this binding
nnoremap <silent><C-Tab>        :Switcher<CR>
inoremap <silent><C-Tab>   <Esc>:Switcher<CR>
xnoremap <silent><C-Tab>   <Esc>:Switcher<CR>
nnoremap <silent><C-\>          :Switcher<CR>
inoremap <silent><C-\>     <Esc>:Switcher<CR>
xnoremap <silent><C-\>     <Esc>:Switcher<CR>

" > File short cuts
noremap <leader>? :e ~/dotfiles/vim/cheatsheet.md<CR>
noremap <leader>N :NERDTree ~/Notes<CR>

" > Browsers
noremap <silent><leader>g :G<CR>
noremap <silent><leader><leader>G :Gbrowse<CR>
noremap <silent><leader>u :UndotreeToggle<CR>
noremap <silent><leader>n :NERDTreeFind<CR>
noremap <silent><leader>a :Autoformat<CR>

" > FZF
noremap <silent><Leader>b :Buffers<CR>

noremap <silent><Leader>f :GFiles<CR>
noremap <silent><Leader>F :Files<CR>

" probably use this the most
noremap <silent><Leader>h :History<CR>
noremap <silent><Leader>: :History:<CR>
noremap <silent><Leader>/ :History/<CR>

noremap <silent><Leader>t :BTags<CR>
noremap <silent><Leader>T :Tags<CR>

noremap <silent><Leader>l :BLines<CR>
noremap <silent><Leader>L :Lines<CR>

" noremap <Leader>m :Methods<CR>
noremap <silent><Leader>h :History<CR>
noremap <silent><Leader>H :Helptags!<CR>
noremap <silent><Leader>M :Maps<CR>
noremap <silent><Leader>C :Commands<CR>
noremap <silent><Leader>' :Marks<CR>
noremap <silent><Leader>s :Filetypes<CR>
noremap <silent><Leader>S :Snippets<CR>
    
" grep bindings worl better
" noremap <Leader>/ :Rg<Space>

" > Grep (same bindings as easygrep)
noremap <silent><leader>vv :grep! -w <cword><CR>
noremap <silent><leader>vV :grep! -w <cWORD><CR>
noremap <silent><leader>vf :grep! <cfile><CR>

" >> Fixes ------------------------------------------------------------------{{{2

" Tweaks to fix problematic mappings 

" Don't use Ex mode, use Q for formatting.
map Q gq

" The perl-support plugin uses mapleaders a lot and the default leader (\)
" conflicts with inputing references, so we make these explicit to terminate the
" lookup as soon as they are entered
inoremap <silent> <leader>$ \$
inoremap <silent> <leader>@ \@
inoremap <silent> <leader>% \%
inoremap <silent> <leader>& \&

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
" Revert with ":iunmap <C-U>".
inoremap <C-U> <C-G>u<C-U>

" Break undo sequence on specific characters
inoremap , ,<C-g>u
inoremap . .<C-g>u
inoremap ! !<C-g>u
inoremap ? ?<C-g>u

" Keep visual selection when indenting
xnoremap > >gv
xnoremap < <gv

" FIXME do I need this anymore?
if &term =~? 'xterm.*'"
    " remap these from the terminal codes
    map <Esc>O1;2A <S-Up>
    map <Esc>O1;2B <S-Down>
    map <Esc>O1;2C <S-Right>
    map <Esc>O1;2D <S-Left>
    map <Esc>O1;3A <A-Up>
    map <Esc>O1;3B <A-Down>
    map <Esc>O1;3C <A-Right>
    map <Esc>O1;3D <A-Left>
    map <Esc>O1;5A <C-Up>
    map <Esc>O1;5B <C-Down>
    map <Esc>O1;5C <C-Right>
    map <Esc>O1;5D <C-Left>

    imap <Esc>O1;2A <S-Up>
    imap <Esc>O1;2B <S-Down>
    imap <Esc>O1;2C <S-Right>
    imap <Esc>O1;2D <S-Left>
    imap <Esc>O1;3A <A-Up>
    imap <Esc>O1;3B <A-Down>
    imap <Esc>O1;3C <A-Right>
    imap <Esc>O1;3D <A-Left>
    imap <Esc>O1;5A <C-Up>
    imap <Esc>O1;5B <C-Down>
    imap <Esc>O1;3C <A-Right>
    imap <Esc>O1;3D <A-Left>
    imap <Esc>O1;5A <C-Up>
    imap <Esc>O1;5B <C-Down>
    imap <Esc>O1;5C <C-Right>
    imap <Esc>O1;5D <C-Left>
endif

" > Old Plugins -------------------------------------------------------------{{{1

" >> TagBar -----------------------------------------------------------------{{{2
" hi TagbarFoldIcon guifg=fg
" let g:tagbar_width     = 31
" let g:tagbar_left      = 0
" let g:tagbar_autoclose = 1
" let g:tagbar_autofocus = 1
" let g:tagbar_compact   = 1
" let g:tagbar_autoshowtag = 0

" let g:tagbar_type_sql = {
"             \    'replace' : 1,
"             \    'ctagstype' : 'sql',
"             \    'kinds' : [
"             \        'P:packages:1',
"             \        'd:prototypes',
"             \        'c:cursors',
"             \        'f:functions',
"             \        'F:record fields:1:0',
"             \        'L:block label',
"             \        'p:procedures',
"             \        's:subtypes',
"             \        't:tables',
"             \        'T:triggers',
"             \        'v:variables',
"             \        'i:indexes',
"             \        'e:events',
"             \        'U:publications',
"             \        'R:services',
"             \        'D:domains',
"             \        'V:views',
"             \        'n:synonyms',
"             \        'x:MobiLink Table Scripts',
"             \        'y:MobiLink Conn Scripts',
"             \        'z:MobiLink Properties',
"             \    ],
"             \}

" let g:tagbar_type_perl = {
"             \    'replace' : 1,
"             \    'ctagstype' : 'perl',
"             \        'kinds' : [
"             \        'p:packages:1:0',
"             \        'c:constants:1:0',
"             \        's:subroutines',
"             \    ],
"             \}

" let g:tagbar_type_html = {
"             \    'kinds' : [
"             \        'f:JavaScript funtions',
"             \        'a:named anchors',
"             \    ],
"             \}

" let g:tagbar_type_tt2html = {
"             \    'ctagstype' : 'tt2html',
"             \        'kinds' : [
"             \        'i:ids',
"             \        'f:functions',
"             \        'm:macros',
"             \    ],
"             \}

" let g:tagbar_type_markdown = {
"             \    'ctagstype' : 'markdown',
"             \    'kinds' : [
"             \        'h:Heading_L1',
"             \        'i:Heading_L2',
"             \        'k:Heading_L3'
"             \    ]
"             \}

" let g:_type_asciidoc = {
"             \    'ctagstype' : 'asciidoc',
"             \    'kinds' : [
"             \        'a:anchors:1',
"             \        't:titles:1',
"             \        'n:includes:1',
"             \        'i:images:1',
"             \        'I:inline images:1'
"             \    ],
"             \    'sort' : 0
"             \}

" function! MyTagbarToggle ()
"     if bufname('%') ==# '__MRU_Files__' || bufname('%') ==# '[BufExplorer]'
"         quit
"     endif
"     silent! NERDTreeClose
"     silent TagbarToggle
" endfunction
"
" >> Perl Support -----------------------------------------------------------{{{2

" let g:Perl_GlobalTemplateFile      =  $HOME.'/.vim/perl-support/templates/Templates'
" let g:Perl_LocalTemplateFile       =  $HOME.'/.vim/perl-support/templates/Templates'
" let g:Perl_TemplateOverwrittenMsg  = 'yes'
" let g:Perl_Ctrl_j                  = 'on'

" let g:Perl_CodeSnippets            = $HOME.'/.vim/perl-support/codesnippets/'
" let g:Perl_LoadMenus               = 'yes'
" let g:Perl_Dictionary_File         = ''
" let g:Perl_Root                    = '&Perl.'
" let g:Perl_MenuHeader              = 'yes'
" let g:Perl_GuiSnippetBrowser       = 'commandline' " commandline|explorer|gui
" let g:Perl_GuiTemplateBrowser      = 'commandline'

" let g:Perl_PerlModuleList          = $HOME.'/.vim/perl-support/modules/perl-modules.list'
" let g:Perl_PerlModuleListGenerator = $HOME.'/.vim/perl-support/scripts/pmdesc3.pl'
" let g:Perl_OutputGvim              = 'vim'
" let g:Perl_XtermDefaults           = '-fa courier -fs 12 -geometry 80x24'
" let g:Perl_Debugger                = 'perl'
" let g:Perl_TimestampFormat         = '%Y%m%d %H%M%S'
" let g:Perl_FormatDate              = '%F'
" let g:Perl_FormatTime              = '%H:%M'
" let g:Perl_FormatYear              = 'year %Y'

" let g:Perl_LineEndCommColDefault   = 49
" let g:Perl_PodcheckerWarnings      = 'yes'
" let g:Perl_Printheader             = "%<%f%h%m%<  %=%{strftime('%x %X')}     Page %N"
" let g:Perl_PerlcriticSeverity      = 5
" let g:Perl_PerlcriticVerbosity     = 5
" let g:Perl_PerlcriticOptions       = ''
" let g:Perl_PerlRegexSubstitution   = '$+'
" let g:Perl_NYTProf_html            = 'no'
" let g:Perl_NYTProf_browser         = 'firefox'

" >> Syntastic --------------------------------------------------------------{{{2

" " Only used in directories where we have created a script to invoke the
" " interpreter
" let g:syntastic_enable_perl_checker = 0
" let g:syntastic_error_symbol='✗'
" let g:syntastic_warning_symbol='⚠'
" let g:syntastic_auto_jump=1

" " set statusline+=%#warningmsg#
" " set statusline+=%{SyntasticStatuslineFlag()}
" " set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 0
" let g:syntastic_check_on_wq = 0

" let g:tsuquyomi_disable_quickfix = 1
" let g:syntastic_javascript_checkers = ['eslint']

" " use python-mode checkers and integration instead
" " let g:syntastic_mode_map = { 'passive_filetypes': ['python'] }

" let g:syntastic_python_python_exec='/usr/bin/python3'
" let g:syntastic_python_checkers = ['flake8', 'python']

" >> RPM-SPEC ---------------------------------------------------------------{{{2
" augroup specfile
"     autocmd!
"     autocmd FileType spec map <buffer> <LocalLeader>c <Plug>SpecChangelog
" augroup END
" let spec_chglog_format = '%a %b %d %Y Kahlil (Kal) Hodgson <kahlil.hodgson999@gmail.com>'
" let spec_chglog_prepend = 1
" let spec_chglog_release_info = 0
" let spec_chglog_never_increase_release = 0
" let g:changelog_date_end_entry_search = '^\s*$'

" >> BufExplorer --------------------------------------------------------------{{{2

