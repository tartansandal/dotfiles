###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet ife "Conditional if..else (ife)" !
if ($1) {
	${2:# body...}
}
else {
	${3:# else...}
}

endsnippet

snippet ifee "Conditional if..elsif..else (ifee)" !
if ($1) {
	${2:# body...}
}
elsif ($3) {
	${4:# elsif...}
}
else {
	${5:# else...}
}

endsnippet


snippet if "if" !
if ($1) {
	${2:# body...}
}

snippet else "else" !
else {
	${1:# body...}
}

endsnippet


snippet elsif "elsif" !
elsif ($1) {
	${2:# body...}
}

endsnippet


snippet sub "Function (sub)" !
sub ${1:function_name} {
	my ($${2:arg1}) = @_;

	${3:# body...}

	return;

} ## end sub $1()

#-------------------------------------------------------------------------------

endsnippet


snippet msub "Method (sub)"
sub ${1:function_name} {
	my ($self, $${2:params}) = @_;

	${3:# body...}

	return;

} ## end sub $1

#-------------------------------------------------------------------------------

endsnippet


snippet asub "Catalyst action (sub)"
sub ${1:function_name} {
	my ($self, $c) = @_;

	${2:# body...}

	return;

} ## end sub $1

#-------------------------------------------------------------------------------

endsnippet


snippet test "Test"
#!/usr/bin/env perl -w

use strict;
use warnings;

use Test::Most;
use ${2:ModuleName};

ok(${3:assertion});

done_testing();

endsnippet

snippet class "class"
package ${1:ClassName};

${2:use base qw(${3:ParentClass});}${2/.+/\n\n/}sub new {
	my $class = shift;
	$class = ref $class if ref $class;
	my $self = bless {}, $class;
	$self;
}

1;

endsnippet


snippet eval "eval" !
eval {
	${1:# do something risky...}
};
if ($@) {
	${2:# handle failure...}
}

endsnippet


snippet try "try" !
# use Try::Tiny;
try {
	${1:# do something risky...}
}
catch {
	if ($_ =~ m{${2: match error message}) {
		${3:# handle failure...}
	}
};

endsnippet


snippet for "for my ... each" !
for my $${1:x} (@${2:array}) {
	${3:# body...}
}

endsnippet


snippet slurp "slurp"
my $${1:var} = do { local $/ = undef; open my $fh, '<', ${2:$file}; <$fh> };

endsnippet


snippet while "while" !
while ($1) {
	${2:# body...}
}


snippet ewhile "while each" !
while (my ($key, $value) = each %${1:hash}) {
	${2:# body...}
}

endsnippet

snippet #--- "comment separator" !
#-------------------------------------------------------------------------------

endsnippet

# vim:ft=snippets:
