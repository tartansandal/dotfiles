#!/bin/bash

#
# .bash_profile
#
# User specific environment and startup programs

# Redefine pathmunge which gets unset at end of /etc/profile
pathmunge() { #
    # Insert a new element into your path is not already there
    # Stolen from /etc/profile
    #
    # skip non-existant directories
    [[ -d $1 ]] || return
    if ! echo $PATH | /bin/egrep "(^|:)$1($|:)" 1>/dev/null 2>&1; then
        if [ "$2" = "after" ]; then
            PATH=$PATH:$1
        else
            PATH=$1:$PATH
        fi
    fi
}

#> prepend in this order
pathmunge /sbin after
pathmunge /usr/sbin after
pathmunge /usr/local/sbin after
pathmunge $HOME/.local/bin
pathmunge $HOME/bin

## interactive variables

## omit superfluous commands from histlist
export HISTIGNORE="&:ls:[bf]g:exit"
export HISTTIMEFORMAT='%a %H:%M | '
if hash nvim 2>/dev/null; then
    export EDITOR='nvim'
    export VISUAL='nvim'
elif hash vimx 2>/dev/null; then
    export EDITOR='vimx'
    export VISUAL='vimx'
else
    export EDITOR='vim'
    export VISUAL='vim'
fi
export PAGER='less'
export RSYNC_RSH=ssh
export LESS="-R"
unset MAILCHECK
export VAGRANT_DEFAULT_PROVIDER=libvirt
export MANPAGER="vim +MANPAGER --not-a-term -"

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"

# ensure clean UTF-8 environment
# export LC_ALL="en_AU.UTF-8"
# export LANG="en_AU.UTF-8"
# export LANGUAGE="en_AU.UTF-8"

export BAT_THEME='ansi-light'

## The following helps with anaconda interferring with gsettings
export GIO_EXTRA_MODULES=/usr/lib64/gio/modules/

if [[ -d ~/.local/lib/perl5 ]]; then
    export PERL_LOCAL_LIB_ROOT="$PERL_LOCAL_LIB_ROOT:~/.local"
    export PERL_MB_OPT="--install_base ~/.local"
    export PERL_MM_OPT="INSTALL_BASE=~/.local"
    export PERL5LIB="$HOME/.local/lib/perl5:$PERL5LIB"
fi

if [[ -d ~/.local/lib/python ]]; then
    export PYTHONPATH=~/.local/lib/python
fi

if [[ -d ~/.local/lib/node_modules ]]; then
    # setup a localized global environment
    #export npm_config_prefix=~/.local XXX: this is incompatible with nvm
    export NODE_PATH=~/.local/lib/node_modules
fi

if [[ -f /usr/bin/google-chrome ]]; then
    export CHROME_BIN=/usr/bin/google-chrome
fi

if [ -d ~/.texlive2019 ]; then
    export MANPATH=/home/kal/.texlive2019/texmf-dist/doc/man:$MANPATH
    export INFOPATH=/home/kal/.texlive2019/texmf-dist/doc/info:$INFOPATH
    export PATH=/home/kal/.texlive2019/bin/x86_64-linux:$PATH
fi

# I'm almost always plugged in, so turn on Optimus PRIME for everything.
# Comment the following out and LOLI when you need to preserve battery.
# export __NV_PRIME_RENDER_OFFLOAD=1
# export __GLX_VENDOR_LIBRARY_NAME=nvidia

#> Ruby setup
#
# Fedora tweaks the RubyGem setup so that gems are installed under ~/.gem/ruby
# and associated executables under ~/bin. This make 'gem install' just work, but
# screws up 'gem uninstall' and bundler. Make this work with by setting GEM_HOME
# and adding a symbolic link.
#
export GEM_HOME=$HOME/.gem/ruby
if [[ ! -e "$HOME/.gem/ruby/bin" ]]; then
    mkdir -p "$HOME/.gem/ruby"
    ln -sf "$HOME/bin" "$HOME/.gem/ruby/"
fi

#> PyEnv setup
if [[ -d $HOME/.pyenv ]]; then
    pathmunge "$HOME/.pyenv/bin"
    pathmunge "$HOME/.pyenv/shims"
    export PYENV_SHELL=bash
fi

export NVM_DIR="${HOME}/.nvm"
if [[ -s "$NVM_DIR/nvm.sh" ]]; then
    . "$NVM_DIR/nvm.sh" # This loads nvm
fi

################################################################################

export PATH
unset pathmunge

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
    . ~/.bashrc
fi
