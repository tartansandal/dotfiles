# ~/.bashrc: executed by bash(1) for non-login shells.
#
# this gets sourced by all interactive shells

# see /usr/share/doc/bash/examples/startup-files for examples

## source global defaults
if [[ -f /etc/bashrc ]]; then
    . /etc/bashrc
fi

# If not running interactively, don't do anything
case $- in
*i*) ;;
*) return ;;
esac

#> turn off terminal driver flow control so C-s and C-q works
#> and don't interfere with vim
stty -ixon -ixoff

# use vi editing mode -- must set before FZF shell integration
# set -o vi

# This is MacOS foo
if [[ -r /usr/local/etc/bash_completion ]]; then
    # shellcheck source=/dev/null
    . /usr/local/etc/bash_completion
fi

#> source private libraries
for lib in \
    hosts \
    prompt \
    direnv \
    fzf \
    dockerized \
    pyenv; do
    # shellcheck source=/home/kal/dotfiles/bash/pyenv
    [[ -r ~/dotfiles/bash/$lib ]] && source ~/dotfiles/bash/$lib
done
unset lib

if [[ -r /usr/bin/aws_completer ]]; then
    # shellcheck source=/dev/null
    complete -C '/usr/bin/aws_completer' aws
fi

# asdf support
# . "$HOME/.asdf/asdf.sh"
# . "$HOME/.asdf/completions/asdf.bash"

#> aliases

# personal preferences
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -I'

# this pydoc works in venvs too
alias pydoc='python -m pydoc'

# use color ls
alias ll='ls -h -p -l --color=auto'
alias l.='ls -p -d --color=auto .*'
alias ls='ls -p --color=auto'
alias ..='cd ..'

alias lg=lazygit
alias gg=gitui

alias dnf-update='sudo dnf update -y'

# use vim with clipboard defined if available
if hash vimx 2>/dev/null; then
    alias vim=vimx
fi

if hash nvim 2>/dev/null; then
    alias vim=nvim
fi

# overrides for weird Mac env
if [[ -n $Apple_PubSub_Socket_Render ]]; then
    alias ll='ls -h -p -l -G'
    alias l.='ls -p -d -G .*'
    alias ls='ls -p -G'
    alias rm='rm -i'
fi

#>bash_completion
if [[ -n "$BASH_COMPLETION" ]]; then
    complete -F _root_command -o filenames s
    complete -C /home/kal/bin/vault vault
    complete -C /usr/bin/terraform terraform
fi

-make-python-envrc() {
    if [[ -f .envrc ]]; then
        echo "Cowardly refusing to overwrite exiting .envrc file"
    else
        {
            echo "# vim: ft=sh"
            echo "export VIRTUAL_ENV=.venv"
            echo "layout python-venv"
        } >.envrc
    fi
}

-make-flake8() {
    {
        echo "[flake8]"
        echo "max-line-length = 88"
        echo "extend-ignore = E203"
    } >.flake8
}

## Shell options

# Ensured hashed commands exist, else fallback to path search
shopt -s checkhash

# Auto update updates LINES and COLUMNS on change in window size
shopt -s checkwinsize

# Convert multi-line command to single line commands in history
shopt -s cmdhist

# Append history to existing hist file on exit
shopt -s histappend

# Allow re-edit of failed history substitution.
shopt -s histreedit

# Verify hist substitution before executing
shopt -s histverify

# Make # on command line behave like a comment char in scripts
shopt -s interactive_comments

# Don't attempt completion if the command line is empty
shopt -s no_empty_cmd_completion

# Filename expansion is case-insensitive
shopt -s nocaseglob

# Enable programmable completion facilities
shopt -s progcomp

# Expand vars and parameters in prompt strings
shopt -s promptvars

# Turn off the following unintuitive options

# Filename globs that match nothing expand to themselves
shopt -u nullglob

# Don't check PATH when looking for args to the 'source' command
shopt -u sourcepath

# Don't sent SIGHUP to all jobs when a interactive login shell exits
shopt -u huponexit

#> Don't let `cd' fallback to variable lookup using the arg as name
shopt -u cdable_vars

#> Don't auto correct minor spelling errors
shopt -u cdspell

# Don't allow dotfiles in the results of path-name expansion
shopt -u dotglob

# Don't save multi-line commands to history literally
shopt -u lithist

# Don't check mail
shopt -u mailwarn

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
if __conda_setup="$('/home/kal/anaconda3/bin/conda' 'shell.bash' 'hook' 2>/dev/null)"; then
    eval "$__conda_setup"
else
    if [ -f "/home/kal/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/kal/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/kal/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup

CONDA_ROOT=~/anaconda3
if [[ -r $CONDA_ROOT/etc/profile.d/bash_completion.sh ]]; then
    # shellcheck source=/home/kal/anaconda3/etc/profile.d/bash_completion.sh
    source $CONDA_ROOT/etc/profile.d/bash_completion.sh
fi
# <<< conda initialize <<<
export NVM_DIR="$HOME/.nvm"
# shellcheck source=/home/kal/.nvm/nvm.sh
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
# shellcheck source=/home/kal/.nvm/bash_completion
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

. "$HOME/.local/share/../bin/env"

# bun
export BUN_INSTALL="$HOME/.local/share/reflex/bun"
export PATH="$BUN_INSTALL/bin:$PATH"
